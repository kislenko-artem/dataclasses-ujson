from typing import Generator, Type, TypeVar, Optional

DC = TypeVar('DC')
DC_GENERATOR = Generator[Type[DC], None, None]

class UJsonMixin:
    @classmethod
    def loads(cls, json_string: str, many: bool = False, **kwargs) -> Type[DC] | DC_GENERATOR: ...
    def to_serializable(self, delete_private: bool = False, time_to_str: bool = True) -> dict: ...
    @staticmethod
    def from_dict(cls, data: dict, _kwargs: Optional[dict] = None) -> Type[DC]: ...
    @staticmethod
    def from_dict_many(cls, data: list) -> DC_GENERATOR: ...

def to_serializable(item, delete_private: bool = False, time_to_str: bool = True) -> dict: ...
def many_to_serializable(obj: list, delete_private: bool = False, time_to_str: bool = True) -> list: ...
